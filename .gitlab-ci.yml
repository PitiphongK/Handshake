# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

variables:
  DEPLOY_SERVER: 52.220.33.128
  DEPLOY_USER: ubuntu
  DEPLOY_PATH: /var/www/sh18-main

build:
  stage: build
  image: node:20.18.0  # Node.js version
  script:
    - cd frontend
    - npm ci
    - npm run build
    - mkdir -p ../artifacts
    - mv dist ../artifacts/frontend_build
  artifacts:
    paths:
      - artifacts/frontend_build
    expire_in: 1 week

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  image: python:3 
  script:
    - python -m pip install -r requirements.txt
    - cd handshake
    - python manage.py makemigrations
    - python manage.py migrate
    - python manage.py test

# lint-test-job:   # This job also runs in the test stage.
#   stage: test    # It can run at the same time as unit-test-job (in parallel).
#   script:
#     - echo "Linting code... This will take about 10 seconds."
#     - sleep 10
#     - echo "No lint issues found."

deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh rsync
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H $DEPLOY_SERVER >> ~/.ssh/known_hosts
  script:
    # Frontend Deployment
    - echo "Deploying frontend..."
    - ssh $DEPLOY_USER@$DEPLOY_SERVER "rm -rf $DEPLOY_PATH/frontend/dist/*"
    - scp -r artifacts/frontend_build/* $DEPLOY_USER@$DEPLOY_SERVER:$DEPLOY_PATH/frontend/dist/

    # Backend Deployment
    - echo "Deploying backend..."
    - ssh $DEPLOY_USER@$DEPLOY_SERVER "rm -rf $DEPLOY_PATH/backend/*"
    - scp -r handshake/* $DEPLOY_USER@$DEPLOY_SERVER:$DEPLOY_PATH/backend/
    - ssh $DEPLOY_USER@$DEPLOY_SERVER "$DEPLOY_PATH/.venv/bin/pip install -r $DEPLOY_PATH/requirements.txt"
    - ssh $DEPLOY_USER@$DEPLOY_SERVER "$DEPLOY_PATH/.venv/bin/python $DEPLOY_PATH/backend/manage.py makemigrations"
    - ssh $DEPLOY_USER@$DEPLOY_SERVER "$DEPLOY_PATH/.venv/bin/python $DEPLOY_PATH/backend/manage.py migrate"
    - ssh $DEPLOY_USER@$DEPLOY_SERVER "$DEPLOY_PATH/.venv/bin/python $DEPLOY_PATH/backend/populate_database.py"

    # Restart Backend Services
    - ssh $DEPLOY_USER@$DEPLOY_SERVER "sudo systemctl restart handshake.service"
    - ssh $DEPLOY_USER@$DEPLOY_SERVER "sudo systemctl restart nginx"
  environment:
    name: production
    url: https://handshake.pitiphong.com/
  only:
    - dev
